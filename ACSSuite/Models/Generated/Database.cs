



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `ACS4Ingest`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=localhost;Initial Catalog=ACS4Ingest;User ID=bstevenson;password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace ACS4Ingest
{

	public partial class ACS4IngestDB : Database
	{
		public ACS4IngestDB() 
			: base("ACS4Ingest")
		{
			CommonConstruct();
		}

		public ACS4IngestDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			ACS4IngestDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static ACS4IngestDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new ACS4IngestDB();
        }

		[ThreadStatic] static ACS4IngestDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static ACS4IngestDB repo { get { return ACS4IngestDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.ConfigFtpDropFolder")]



	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class ConfigFtpDropFolder : ACS4IngestDB.Record<ConfigFtpDropFolder>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Alias { get; set; }





		[Column] public string FtpHost { get; set; }





		[Column] public string FtpUser { get; set; }





		[Column] public string FtpPassword { get; set; }





		[Column] public string FtpRemotePath { get; set; }





		[Column] public bool Enabled { get; set; }



	}

    

	[TableName("dbo.DropFolderStats")]



	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class DropFolderStat : ACS4IngestDB.Record<DropFolderStat>  
    {



		[Column] public int Id { get; set; }





		[Column] public int RunLogId { get; set; }





		[Column] public int DropFolderId { get; set; }





		[Column] public int EpubCount { get; set; }



	}

    

	[TableName("dbo.IngestionLog")]



	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class IngestionLog : ACS4IngestDB.Record<IngestionLog>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? RunLogId { get; set; }





		[Column] public int? DropFolderId { get; set; }





		[Column] public string EpubFileName { get; set; }





		[Column] public string Isbn { get; set; }





		[Column] public string ArchivePath { get; set; }





		[Column] public long? FileSize { get; set; }





		[Column] public bool Ingested { get; set; }





		[Column] public string IngestType { get; set; }





		[Column] public string ACS4Guid { get; set; }





		[Column] public int? PackageHttpResponseCode { get; set; }





		[Column] public string PackageResponse { get; set; }





		[Column] public string PackageErrorCode { get; set; }





		[Column] public string PackageErrorMessage { get; set; }





		[Column] public bool? DistributionRightsAssigned { get; set; }





		[Column] public string DistributionRightsErrorCode { get; set; }





		[Column] public string DistributionRightsErrorMessage { get; set; }





		[Column] public bool? IsCorrupt { get; set; }





		[Column] public string OpfIdentifier { get; set; }





		[Column] public string IsbnFromOpf { get; set; }





		[Column] public string IsbnFromFileName { get; set; }





		[Column] public bool? IsValidPreCheck { get; set; }





		[Column] public string PreCheckError { get; set; }





		[Column] public DateTime EnteredDateUtc { get; set; }



	}

    

	[TableName("dbo.RunLog")]



	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class RunLog : ACS4IngestDB.Record<RunLog>  
    {



		[Column] public int Id { get; set; }





		[Column] public DateTime StartTimeUtc { get; set; }





		[Column] public DateTime? EndTimeUtc { get; set; }





		[Column] public int? BatchSize { get; set; }





		[Column] public int? InitialCountBuiltInCatalog { get; set; }





		[Column] public int? InitialCounteCtbCatalog { get; set; }





		[Column] public int? NumFilesDropped { get; set; }





		[Column] public int? NumFilesIngested { get; set; }



	}


}



